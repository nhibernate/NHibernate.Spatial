---
#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image:
  - Visual Studio 2022
  - Ubuntu2004

# scripts that run after cloning repository
install:
  # install SQL Server 2008 R2 SP2 Express (not included in VS 2017 image; see: https://www.appveyor.com/docs/build-environment/#databases)
  - cmd: curl -L -O -S -s https://download.microsoft.com/download/0/4/B/04BE03CD-EAF3-4797-9D8D-2E08E316C998/SQLEXPR_x64_ENU.exe
  - cmd: SQLEXPR_x64_ENU.exe /QUIET /IACCEPTSQLSERVERLICENSETERMS /ACTION=INSTALL /FEATURES=SQL /INSTANCENAME=MSSQLSERVER2008 /TCPENABLED=1 /SECURITYMODE=SQL /SAPWD=Password12! /ADDCURRENTUSERASSQLADMIN /SQLSVCACCOUNT="NT AUTHORITY\Network Service" /AGTSVCACCOUNT="NT AUTHORITY\Network Service"

  # install SQL Server 2012 SP1 Express (not included in VS 2017 image; see: https://www.appveyor.com/docs/build-environment/#databases)
  - cmd: curl -L -O -S -s https://download.microsoft.com/download/5/2/9/529FEF7B-2EFB-439E-A2D1-A1533227CD69/SQLEXPR_x64_ENU.exe
  - cmd: SQLEXPR_x64_ENU.exe /QUIET /IACCEPTSQLSERVERLICENSETERMS /ACTION=INSTALL /FEATURES=SQL /INSTANCENAME=MSSQLSERVER2012 /TCPENABLED=1 /SECURITYMODE=SQL /SAPWD=Password12! /ADDCURRENTUSERASSQLADMIN /SQLSVCACCOUNT="NT AUTHORITY\Network Service" /AGTSVCACCOUNT="NT AUTHORITY\Network Service"

  # install x86 CLR types for SQL Server 2012 SP1 (required when running dotnet test for MsSql tests)
  - cmd: curl -L -O -S -s https://download.microsoft.com/download/F/E/D/FEDB200F-DE2A-46D8-B661-D019DFE9D470/ENU/x86/SQLSysClrTypes.msi
  - cmd: SQLSysClrTypes.msi /passive

  # enable dynamic TCP ports for 2008 and 2012 SQL Server instances (so they can be run simultaneously)
  - ps: if ($isWindows) { set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql10_50.MSSQLSERVER2008\mssqlserver\supersocketnetlib\tcp\ipall' -name TcpDynamicPorts -value '0' }
  - ps: if ($isWindows) { set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql10_50.MSSQLSERVER2008\mssqlserver\supersocketnetlib\tcp\ipall' -name TcpPort -value '' }
  - ps: if ($isWindows) { set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql11.MSSQLSERVER2012\mssqlserver\supersocketnetlib\tcp\ipall' -name TcpDynamicPorts -value '0' }
  - ps: if ($isWindows) { set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql11.MSSQLSERVER2012\mssqlserver\supersocketnetlib\tcp\ipall' -name TcpPort -value '' }

  # install MySQL 5.6
  # - cmd: curl -L -O -S -s https://dev.mysql.com/get/Downloads/MySQLInstaller/mysql-installer-web-community-5.6.36.0.msi
  # - cmd: msiexec /i mysql-installer-web-community-5.6.36.0.msi /quiet
  # - cmd: "C:\Program Files (x86)\MySQL\MySQL Installer for Windows\MySQLInstallerConsole.exe" community install server;5.6.36;x64:*:port=3306;passwd=Password12! -silent

  # change default port for MySQL 5.7 (so it can run simultaneously with MySQL 5.6)
  # - ps: if ($isWindows) { $iniPath = 'C:\ProgramData\MySQL\MySQL Server 5.7\my.ini' }
  # - ps: if ($isWindows) { (Get-Content $iniPath).replace('port=3306', 'port=3307') | Set-Content $iniPath }

  # install PostGIS 2.5 for PostgreSQL 10 on Windows
  - cmd: curl -L -O -S -s https://ftp.postgresql.org/pub/postgis/pg10/v2.5.3/win64/postgis-bundle-pg10x64-setup-2.5.3-2.exe
  - cmd: postgis-bundle-pg10x64-setup-2.5.3-2.exe /S /D=C:\Program Files\PostgreSQL\10

  # install PostgreSQL 14 and PostGIS 3.2 on Windows
  - cmd: curl -L -O -S -s https://get.enterprisedb.com/postgresql/postgresql-14.5-1-windows-x64.exe
  - cmd: postgresql-14.5-1-windows-x64.exe --mode unattended --superpassword Password12! --serverport 5433
  - cmd: curl -L -O -S -s https://ftp.postgresql.org/pub/postgis/pg14/v3.2.2/win64/postgis-bundle-pg14x64-setup-3.2.2-2.exe
  - cmd: postgis-bundle-pg14x64-setup-3.2.2-2.exe /S /D=C:\Program Files\PostgreSQL\14

  # install PostgreSQL 10 and PostGIS 2.5 on Ubuntu
  - sh: sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main"
  - sh: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  - sh: sudo apt-get update
  - sh: sudo apt-get -y install postgresql-10 postgresql-10-postgis-2.5
  - sh: sudo sed -i 's/port = [0-9]\+/port = 5432/' /etc/postgresql/10/main/postgresql.conf

  # install PostgreSQL 14 and PostGIS 3 on Ubuntu
  - sh: sudo apt-get -y install postgresql-14 postgresql-14-postgis-3
  - sh: sudo sed -i 's/port = [0-9]\+/port = 5433/' /etc/postgresql/14/main/postgresql.conf

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build configuration, i.e. Debug, Release, etc.
configuration: Release

# MSBuild options
build:
  parallel: true
  project: NHibernate.Spatial.sln
  verbosity: minimal

# scripts to run before build
before_build:
  - dotnet --version
  - dotnet restore --verbosity minimal

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# scripts to run before tests
before_test:
  # setup SQL Server 2008
  - cmd: sqlcmd -S (local)\MSSQLSERVER2008 -i Tests.NHibernate.Spatial.MsSql2008\nhsp_test.sql

  # setup SQL Server 2012
  - cmd: sqlcmd -S (local)\MSSQLSERVER2012 -i Tests.NHibernate.Spatial.MsSql2012\nhsp_test.sql

  # setup MySQL 5.6
  # - cmd: net start mysql56
  # - cmd: SET MYSQL_PWD=Password12!
  # - cmd: SET mysql="C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe"
  # - cmd: '%mysql% -P 3306 -u root < Tests.NHibernate.Spatial.MySQL\nhsp_test.sql'

  # setup MySQL 5.7
  # - cmd: net start mysql57
  # - cmd: SET mysql="C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql.exe"
  # - cmd: '%mysql% -P 3307 -u root < Tests.NHibernate.Spatial.MySQL57\nhsp_test.sql'

  # setup PostgreSQL 10 on Windows
  - cmd: net start postgresql-x64-10
  - cmd: SET psql="C:\Program Files\PostgreSQL\10\bin\psql.exe"
  - cmd: SET PGPASSWORD=Password12!
  - cmd: '%psql% -p 5432 -U postgres -f Tests.NHibernate.Spatial.PostGis20\nhsp_test.sql'

  # setup PostgreSQL 14 on Windows
  - cmd: SET psql="C:\Program Files\PostgreSQL\14\bin\psql.exe"
  - cmd: SET PGPASSWORD=Password12!
  - cmd: '%psql% -p 5433 -U postgres -f Tests.NHibernate.Spatial.PostGis20\nhsp_test.sql'

  # setup PostgreSQL 10 on Ubuntu
  # NOTE: Need to run psql command as postgres user to prevent peer authentication failure
  - sh: sudo pg_ctlcluster 10 main start
  - sh: sudo -u postgres psql -p 5432 -U postgres -f Tests.NHibernate.Spatial.PostGis20/nhsp_test.sql

  # setup PostgreSQL 14 on Ubuntu
  - sh: sudo pg_ctlcluster 14 main start
  - sh: sudo -u postgres psql -p 5433 -U postgres -f Tests.NHibernate.Spatial.PostGis20/nhsp_test.sql

test_script:
  - cmd: dotnet test -c Release --no-build --logger "trx;LogFileName=MsSql2008.trx" --results-directory %APPVEYOR_BUILD_FOLDER% Tests.NHibernate.Spatial.MsSql2008
  - cmd: dotnet test -c Release --no-build --logger "trx;LogFileName=MsSql2012.trx" --results-directory %APPVEYOR_BUILD_FOLDER% Tests.NHibernate.Spatial.MsSql2012
  # Disable MySQL tests until issue #87 is resolved
  # - cmd: dotnet test -c Release --no-build --logger "trx;LogFileName=MySQL.trx" --results-directory %APPVEYOR_BUILD_FOLDER% Tests.NHibernate.Spatial.MySQL
  # - cmd: dotnet test -c Release --no-build --logger "trx;LogFileName=MySQL57.trx" --results-directory %APPVEYOR_BUILD_FOLDER% Tests.NHibernate.Spatial.MySQL57
  - ps: dotnet test -c Release --no-build --logger "trx;LogFileName=PostGis20_PGSQL10_PG25.trx" --results-directory $env:APPVEYOR_BUILD_FOLDER Tests.NHibernate.Spatial.PostGis20
  - ps: $appSettings = 'Tests.NHibernate.Spatial.PostGis20/bin/Release/net6.0/appsettings.json'; (Get-Content $appSettings) -Replace '5432', '5433' | Set-Content $appSettings
  - ps: dotnet test -c Release --no-build --logger "trx;LogFileName=PostGis20_PGSQL14_PG32.trx" --results-directory $env:APPVEYOR_BUILD_FOLDER Tests.NHibernate.Spatial.PostGis20

after_test:
  - ps: $wc = New-Object 'System.Net.WebClient'
  - ps: $uri = "https://ci.appveyor.com/api/testresults/mstest/$($env:APPVEYOR_JOB_ID)"
  - ps: if ($isWindows) { $wc.UploadFile($uri, (Resolve-Path MsSql2008.trx)) }
  - ps: if ($isWindows) { $wc.UploadFile($uri, (Resolve-Path MsSql2012.trx)) }
  # - ps: $wc.UploadFile($uri, (Resolve-Path MySQL.trx))
  # - ps: $wc.UploadFile($uri, (Resolve-Path MySQL57.trx))
  - ps: $wc.UploadFile($uri, (Resolve-Path PostGis20_PGSQL10_PG25.trx))
  - ps: $wc.UploadFile($uri, (Resolve-Path PostGis20_PGSQL14_PG32.trx))
